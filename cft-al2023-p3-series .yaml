# https://github.com/openmarmot/aws-ec2-nvidia-drivers

# Please check the costs of running a P3 instance type before running !

# Ref: https://repost.aws/articles/ARwfQMxiC-QMOgWykD9mco1w/how-do-i-install-nvidia-gpu-driver-cuda-toolkit-and-optionally-nvidia-container-toolkit-in-amazon-linux-2023-al2023

AWSTemplateFormatVersion: 2010-09-09

Description: Deploy a EC2 instance with the P3 series Nvidia drivers for Amazon Linux 2023

Parameters:
  Name:
    Type: String
    Description: A unique name for your AWS Resource
  AmiId:
    Description: Amazon Linux 2023 AMI ID
    Type: 'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
    Default: '/aws/service/ami-amazon-linux-latest/al2023-ami-kernel-default-x86_64'
  InstanceType:
    Type: String
    Description: EC2 instance type to launch. This template is designed for P3 series instances
    Default: p3.2xlarge
  VolumeSize:
    Description: Size of the EBS Volume in GB.
    Type: Number
    Default: 100
  VPC:
    Description: The VPC in which the EC2 instance will reside
    Type: AWS::EC2::VPC::Id
  Subnet:
    Description: The VPC subnet in which the EC2 instance will reside
    Type: AWS::EC2::Subnet::Id

Resources:
  rIAMRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: !Sub '${Name}-ec2-role'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Principal:
              Service:
                - 'ec2.amazonaws.com'
            Action:
              - 'sts:AssumeRole'
      Policies:
        - PolicyName: ssm-connect-minimal-permissions
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: 'Allow'
                Action:
                  - 'ssm:UpdateInstanceInformation'
                  - 'ssmmessages:CreateControlChannel'
                  - 'ssmmessages:CreateDataChannel'
                  - 'ssmmessages:OpenControlChannel'
                  - 'ssmmessages:OpenDataChannel'
                Resource: '*'

  rInstanceProfile:
    Type: 'AWS::IAM::InstanceProfile'
    Properties:
      InstanceProfileName: !Sub '${Name}-ec2-profile'
      Roles:
        - Ref: rIAMRole

  rSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: EC2 workspace security group
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
          Description: 'Allow Egress'
      Tags:
        - Key: Name
          Value: !Join ['-', [Ref: Name, 'ec2-sg']]
        - Key: Description
          Value: EC2 environment security group
      VpcId: !Ref VPC

  rEC2Instance:
    Type: 'AWS::EC2::Instance'
    CreationPolicy:
      ResourceSignal:
        Timeout: 'PT20M'
    Properties:
      ImageId: !Ref AmiId
      InstanceType: !Ref InstanceType
      IamInstanceProfile: !Ref rInstanceProfile
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeSize: !Ref VolumeSize
            VolumeType: gp3
            Encrypted: true
            DeleteOnTermination: true
      SecurityGroupIds:
        - !GetAtt rSecurityGroup.GroupId
      SubnetId: !Ref Subnet
      Tags:
        - Key: Name
          Value: !Join ['-', [Ref: Name, 'ec2-AL2023']]
        - Key: Description
          Value: EC2 AL2023 with Nvidia drivers
      UserData:
        Fn::Base64: !Sub |
          #!/usr/bin/env bash

          # --- general ---
          dnf update -y
          
          # ---- NVIDIA driver install for AL2023----
          # pre-reqs
          dnf install -y dkms kernel-devel kernel-modules-extra
          # repos
          dnf config-manager --add-repo https://developer.download.nvidia.com/compute/cuda/repos/amzn2023/x86_64/cuda-amzn2023.repo
          dnf config-manager --add-repo https://nvidia.github.io/libnvidia-container/stable/rpm/nvidia-container-toolkit.repo
          dnf clean expire-cache
          
          # nvidia driver
          dnf module install -y nvidia-driver:latest-dkms

          # cuda toolkit
          dnf install -y cuda-toolkit

          # optional - install the container tool kit 
          dnf install -y nvidia-container-toolkit

          # tests
          # nvidia-smi
          # /etc/alternatives/cuda/bin/nvcc --version

          # --- signal back to cloudformation that we are done ---
          /opt/aws/bin/cfn-signal -e $? --stack "${AWS::StackName}" --resource "rEC2Instance" --region "${AWS::Region}"
          
Outputs:
  Ec2InstancePrivateIp:
    Description: Private IP address of the EC2 workspace instance
    Value: !GetAtt [rEC2Instance, PrivateIp]

  Ec2InstanceId:
    Description: Instance Id for the EC2 workspace instance
    Value: !Ref rEC2Instance
  
